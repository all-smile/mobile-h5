#!/usr/bin/env node

const moment = require("moment");
const execa = require("execa");
var fs = require("fs");
var path = require("path");
const util = require("util");
const child_process = require("child_process");
// The zip library needs to be instantiated:
// https://github.com/daraosn/node-zip http://stuk.github.io/jszip/
var zip = new require("node-zip")();

var root = path.join(__dirname, "../");

const zipDir = process.argv[2];
console.log("zipDir", zipDir);

function addFile(instance, folder) {
    const files = fs.readdirSync(folder);
    for (let i = 0, len = files.length; i < len; i++) {
        const file = path.join(folder, files[i]);

        const stat = fs.statSync(file);
        if (stat.isDirectory()) {
            const folder = instance.folder(path.basename(file));
            addFile(folder, file);
        } else {
            if (path.extname(file) !== ".map") {
                instance.file(path.basename(file), fs.readFileSync(file));
            }
        }
    }
}

// 获取当前git分支
function getGitBranch() {
    const res = execa.commandSync("git rev-parse --abbrev-ref HEAD");
    return res.stdout;
}
const curBranch = getGitBranch();
console.log("curBranch===>", curBranch);

function delDir(dirPath) {
    if (!fs.existsSync(dirPath)) {
        return;
    }
    var files = fs.readdirSync(dirPath);
    files.forEach((file, idx) => {
        var curPath = path.join(dirPath, file);
        if (fs.statSync(curPath).isDirectory()) {
            delDir(curPath);
        } else {
            fs.unlinkSync(curPath);
        }
    });

    fs.rmdirSync(dirPath);
}

function copyDir(src, dest) {
    var files = fs.readdirSync(src);
    files.forEach((item, idx) => {
        var itemPath = path.join(src, item);
        var itemStat = fs.statSync(itemPath);
        var savePath = path.join(dest, itemPath.replace(src, ""));
        var saveDir = savePath.substring(0, savePath.lastIndexOf("\\"));

        if (itemStat.isFile()) {
            if (!fs.existsSync(saveDir)) {
                fs.mkdirSync(saveDir, { recursive: true });
            }
            fs.copyFileSync(itemPath, savePath);
        } else if (itemStat.isDirectory()) {
            copyDir(itemPath, path.join(saveDir, item));
        }
    });
}

const exec = util.promisify(child_process.exec);

const runCmd = async(cmd) => {
    return await exec(`${cmd}`, { cmd: root });
};

fs.copyFileSync(
    path.join(root, "/bin/packagefile/config.properties"),
    path.join(root, "/dist/config.properties")
);

var outputDir = path.join(root, "output");

delDir(outputDir);
fs.mkdirSync(outputDir);
copyDir(path.join(root, "dist"), path.join(outputDir, "www"));

runCmd("git rev-list --all --count").then((ret) => {
    let v = ret.stdout;
    fs.writeFileSync(
        path.join(outputDir, "plugin.properties"),
        "version_code=" + v
    );

    runCmd("git rev-parse --short HEAD").then((ret) => {
        fs.appendFileSync(
            path.join(outputDir, "plugin.properties"),
            "version_name=" + ret.stdout
        );
        fs.appendFileSync(path.join(outputDir, "plugin.properties"), "type=html5");
        fs.appendFileSync(
            path.join(outputDir, "plugin.properties"),
            "\r\nplatform=[android,ios,win,mac]"
        );

        // addFile(zip, path.join(root, 'dist'));
        addFile(zip, outputDir);

        var data = zip.generate({ base64: false, compression: "DEFLATE" });
        // it's important to use *binary* encode
        const time = moment().format("YYYYMMDDHHmm");
        // fs.writeFileSync('release.zip', data, 'binary');
        fs.writeFileSync("release.zip", data, "binary");
        fs.writeFileSync(`release_${curBranch}_${time}.zip`, data, "binary");
    });
});